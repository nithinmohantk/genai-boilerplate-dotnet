// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GenAIBoilerplate.Tests.BDD.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TenantManagementFeature : object, Xunit.IClassFixture<TenantManagementFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TenantManagement.feature"
#line hidden
        
        public TenantManagementFeature(TenantManagementFeature.FixtureData fixtureData, GenAIBoilerplate_Tests_BDD_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Tenant Management", "    As a system administrator\r\n    I want to manage multiple tenants\r\n    So that" +
                    " I can provide isolated environments for different organizations", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
    testRunner.Given("the GenAI platform is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new tenant as super admin")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Create a new tenant as super admin")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "smoke")]
        public void CreateANewTenantAsSuperAdmin()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "admin",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new tenant as super admin", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 12
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "Status"});
                table27.AddRow(new string[] {
                            "Acme Corp",
                            "Leading technology company",
                            "Active"});
#line 13
    testRunner.When("I create a new tenant:", ((string)(null)), table27, "When ");
#line hidden
#line 16
    testRunner.Then("I should receive a successful tenant creation response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
    testRunner.And("the tenant should be created in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table28.AddRow(new string[] {
                            "Name",
                            "Acme Corp"});
                table28.AddRow(new string[] {
                            "Description",
                            "Leading technology company"});
                table28.AddRow(new string[] {
                            "Status",
                            "Active"});
#line 18
    testRunner.And("the tenant should have the correct details:", ((string)(null)), table28, "And ");
#line hidden
#line 23
    testRunner.And("a default API key should be generated for the tenant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get all tenants as super admin")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Get all tenants as super admin")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void GetAllTenantsAsSuperAdmin()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all tenants as super admin", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 27
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "Status"});
                table29.AddRow(new string[] {
                            "Acme Corp",
                            "Technology company",
                            "Active"});
                table29.AddRow(new string[] {
                            "Beta Inc",
                            "Startup company",
                            "Active"});
                table29.AddRow(new string[] {
                            "Gamma LLC",
                            "Consulting firm",
                            "Inactive"});
#line 28
    testRunner.And("I have created multiple tenants:", ((string)(null)), table29, "And ");
#line hidden
#line 33
    testRunner.When("I request all tenants", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
    testRunner.Then("I should receive all tenants", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Required"});
                table30.AddRow(new string[] {
                            "Id",
                            "true"});
                table30.AddRow(new string[] {
                            "Name",
                            "true"});
                table30.AddRow(new string[] {
                            "Status",
                            "true"});
                table30.AddRow(new string[] {
                            "CreatedAt",
                            "true"});
                table30.AddRow(new string[] {
                            "UpdatedAt",
                            "true"});
                table30.AddRow(new string[] {
                            "UserCount",
                            "true"});
#line 35
    testRunner.And("the tenants should include system metadata:", ((string)(null)), table30, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update tenant information")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Update tenant information")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void UpdateTenantInformation()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update tenant information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 46
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "Status"});
                table31.AddRow(new string[] {
                            "Acme Corp",
                            "Technology company",
                            "Active"});
#line 47
    testRunner.And("I have created a tenant:", ((string)(null)), table31, "And ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "Status"});
                table32.AddRow(new string[] {
                            "Acme Corporation",
                            "Leading technology enterprise",
                            "Active"});
#line 50
    testRunner.When("I update the tenant information:", ((string)(null)), table32, "When ");
#line hidden
#line 53
    testRunner.Then("the tenant should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
    testRunner.And("the updated information should be saved to the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
    testRunner.And("when I retrieve the tenant, it should show the new details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Deactivate a tenant")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Deactivate a tenant")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void DeactivateATenant()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate a tenant", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 59
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
    testRunner.And("I have an active tenant with users and data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
    testRunner.When("I deactivate the tenant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
    testRunner.Then("the tenant status should be changed to Inactive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
    testRunner.And("existing users should no longer be able to login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
    testRunner.And("existing sessions should be invalidated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
    testRunner.But("tenant data should be preserved for reactivation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reactivate a tenant")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Reactivate a tenant")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void ReactivateATenant()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reactivate a tenant", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 69
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
    testRunner.And("I have an inactive tenant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
    testRunner.When("I reactivate the tenant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
    testRunner.Then("the tenant status should be changed to Active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
    testRunner.And("users should be able to login again", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
    testRunner.And("the tenant data should be accessible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate API key for tenant")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Generate API key for tenant")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "api-keys")]
        [Xunit.TraitAttribute("Category", "smoke")]
        public void GenerateAPIKeyForTenant()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "api-keys",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate API key for tenant", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 78
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 79
    testRunner.And("I have an active tenant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "KeyName",
                            "Provider",
                            "Description"});
                table33.AddRow(new string[] {
                            "OpenAI Primary",
                            "OpenAI",
                            "Main API key for OpenAI"});
#line 80
    testRunner.When("I generate a new API key for the tenant:", ((string)(null)), table33, "When ");
#line hidden
#line 83
    testRunner.Then("I should receive a successful API key creation response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
    testRunner.And("the API key should be created in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.And("the API key should be associated with the tenant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table34.AddRow(new string[] {
                            "KeyName",
                            "OpenAI Primary"});
                table34.AddRow(new string[] {
                            "Provider",
                            "OpenAI"});
                table34.AddRow(new string[] {
                            "IsActive",
                            "true"});
#line 86
    testRunner.And("the API key should have the correct details:", ((string)(null)), table34, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="List tenant API keys")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "List tenant API keys")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "api-keys")]
        public void ListTenantAPIKeys()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "api-keys"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List tenant API keys", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 94
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "KeyName",
                            "Provider",
                            "Status"});
                table35.AddRow(new string[] {
                            "OpenAI Primary",
                            "OpenAI",
                            "Active"});
                table35.AddRow(new string[] {
                            "OpenAI Secondary",
                            "OpenAI",
                            "Active"});
                table35.AddRow(new string[] {
                            "Anthropic Main",
                            "Anthropic",
                            "Inactive"});
#line 95
    testRunner.And("I have a tenant with multiple API keys:", ((string)(null)), table35, "And ");
#line hidden
#line 100
    testRunner.When("I request the tenant\'s API keys", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
    testRunner.Then("I should receive all API keys for the tenant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Required"});
                table36.AddRow(new string[] {
                            "Id",
                            "true"});
                table36.AddRow(new string[] {
                            "KeyName",
                            "true"});
                table36.AddRow(new string[] {
                            "Provider",
                            "true"});
                table36.AddRow(new string[] {
                            "IsActive",
                            "true"});
                table36.AddRow(new string[] {
                            "CreatedAt",
                            "true"});
                table36.AddRow(new string[] {
                            "LastUsed",
                            "false"});
#line 102
    testRunner.And("each API key should include metadata:", ((string)(null)), table36, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update API key status")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Update API key status")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "api-keys")]
        public void UpdateAPIKeyStatus()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "api-keys"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update API key status", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 113
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
    testRunner.And("I have a tenant with an active API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
    testRunner.When("I deactivate the API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
    testRunner.Then("the API key status should be changed to inactive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
    testRunner.And("the API key should no longer be usable for AI requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
    testRunner.And("existing AI requests should fail with authentication errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete API key")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Delete API key")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "api-keys")]
        public void DeleteAPIKey()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "api-keys"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete API key", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 122
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 123
    testRunner.And("I have a tenant with an API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
    testRunner.When("I delete the API key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 125
    testRunner.Then("the API key should be removed from the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
    testRunner.And("the API key should no longer be usable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
    testRunner.And("any cached references should be invalidated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tenant data isolation verification")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Tenant data isolation verification")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "isolation")]
        [Xunit.TraitAttribute("Category", "security")]
        public void TenantDataIsolationVerification()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "isolation",
                    "security"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tenant data isolation verification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "TenantName",
                            "UserEmail",
                            "SessionTitle"});
                table37.AddRow(new string[] {
                            "Acme Corp",
                            "user1@acme.com",
                            "Acme Chat 1"});
                table37.AddRow(new string[] {
                            "Beta Inc",
                            "user2@beta.com",
                            "Beta Discussion"});
#line 131
    testRunner.Given("I have two different tenants with users and chat sessions:", ((string)(null)), table37, "Given ");
#line hidden
#line 135
    testRunner.When("I login as user1@acme.com", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 136
    testRunner.And("I request my chat sessions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
    testRunner.Then("I should only see chat sessions from Acme Corp", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
    testRunner.And("I should not see any data from Beta Inc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
    testRunner.And("the session isolation should be enforced at the database level", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tenant admin manages tenant users")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Tenant admin manages tenant users")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "permissions")]
        public void TenantAdminManagesTenantUsers()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "permissions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tenant admin manages tenant users", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 142
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 143
    testRunner.Given("I am logged in as a tenant admin for \"Acme Corp\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Role",
                            "Status"});
                table38.AddRow(new string[] {
                            "user1@acme.com",
                            "User",
                            "Active"});
                table38.AddRow(new string[] {
                            "user2@acme.com",
                            "User",
                            "Active"});
#line 144
    testRunner.And("I have users in my tenant:", ((string)(null)), table38, "And ");
#line hidden
#line 148
    testRunner.When("I request my tenant\'s users", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
    testRunner.Then("I should receive all users in my tenant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 150
    testRunner.And("I should not see users from other tenants", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
    testRunner.And("each user should include tenant-specific information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tenant admin cannot access other tenant data")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Tenant admin cannot access other tenant data")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "permissions")]
        public void TenantAdminCannotAccessOtherTenantData()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "permissions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tenant admin cannot access other tenant data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 155
    testRunner.Given("I am logged in as a tenant admin for \"Acme Corp\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 156
    testRunner.And("there are other tenants in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
    testRunner.When("I attempt to access another tenant\'s information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 158
    testRunner.Then("I should receive a forbidden error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
    testRunner.And("I should not see any data from other tenants", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Regular user cannot access tenant management")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Regular user cannot access tenant management")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "permissions")]
        public void RegularUserCannotAccessTenantManagement()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "permissions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Regular user cannot access tenant management", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 162
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 163
    testRunner.Given("I am logged in as a regular user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 164
    testRunner.When("I attempt to access tenant management endpoints", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 165
    testRunner.Then("I should receive a forbidden error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 166
    testRunner.And("I should not be able to view any tenant information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Configure tenant-specific settings")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Configure tenant-specific settings")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "settings")]
        public void ConfigureTenant_SpecificSettings()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "settings"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configure tenant-specific settings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 169
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 170
    testRunner.Given("I am logged in as a tenant admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Value"});
                table39.AddRow(new string[] {
                            "MaxUsersPerTenant",
                            "100"});
                table39.AddRow(new string[] {
                            "AllowedAIProviders",
                            "OpenAI,Anthropic"});
                table39.AddRow(new string[] {
                            "DefaultModel",
                            "gpt-4"});
                table39.AddRow(new string[] {
                            "RateLimitPerUser",
                            "1000"});
#line 171
    testRunner.When("I update tenant settings:", ((string)(null)), table39, "When ");
#line hidden
#line 177
    testRunner.Then("the settings should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 178
    testRunner.And("the settings should be applied to all users in the tenant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
    testRunner.And("the settings should be enforced in API requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View tenant usage analytics")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "View tenant usage analytics")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "admin")]
        public void ViewTenantUsageAnalytics()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "analytics",
                    "admin"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View tenant usage analytics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 182
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 183
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "TenantName",
                            "Users",
                            "Sessions",
                            "Messages",
                            "APIRequests"});
                table40.AddRow(new string[] {
                            "Acme Corp",
                            "25",
                            "150",
                            "3000",
                            "2500"});
                table40.AddRow(new string[] {
                            "Beta Inc",
                            "10",
                            "75",
                            "1500",
                            "1200"});
#line 184
    testRunner.And("I have tenants with usage data:", ((string)(null)), table40, "And ");
#line hidden
#line 188
    testRunner.When("I request tenant analytics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 189
    testRunner.Then("I should receive usage statistics for all tenants", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Metric",
                            "Required"});
                table41.AddRow(new string[] {
                            "UserCount",
                            "true"});
                table41.AddRow(new string[] {
                            "ActiveSessions",
                            "true"});
                table41.AddRow(new string[] {
                            "MessageCount",
                            "true"});
                table41.AddRow(new string[] {
                            "APIRequestCount",
                            "true"});
                table41.AddRow(new string[] {
                            "StorageUsage",
                            "true"});
                table41.AddRow(new string[] {
                            "LastActivityDate",
                            "true"});
#line 190
    testRunner.And("the analytics should include:", ((string)(null)), table41, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate tenant usage for billing")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Calculate tenant usage for billing")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "billing")]
        public void CalculateTenantUsageForBilling()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "billing"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate tenant usage for billing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 200
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 201
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 202
    testRunner.And("I have a tenant with usage data over a billing period", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
    testRunner.When("I request billing information for the tenant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 204
    testRunner.Then("I should receive detailed usage metrics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Metric",
                            "Required"});
                table42.AddRow(new string[] {
                            "TotalAPIRequests",
                            "true"});
                table42.AddRow(new string[] {
                            "TotalMessages",
                            "true"});
                table42.AddRow(new string[] {
                            "StorageUsedGB",
                            "true"});
                table42.AddRow(new string[] {
                            "ActiveUserCount",
                            "true"});
                table42.AddRow(new string[] {
                            "BillingPeriodStart",
                            "true"});
                table42.AddRow(new string[] {
                            "BillingPeriodEnd",
                            "true"});
                table42.AddRow(new string[] {
                            "EstimatedCost",
                            "true"});
#line 205
    testRunner.And("the billing data should include:", ((string)(null)), table42, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Prevent duplicate tenant names")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Prevent duplicate tenant names")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "validation")]
        public void PreventDuplicateTenantNames()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prevent duplicate tenant names", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 216
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 217
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 218
    testRunner.And("I have created a tenant named \"Acme Corp\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "Status"});
                table43.AddRow(new string[] {
                            "Acme Corp",
                            "Different company",
                            "Active"});
#line 219
    testRunner.When("I attempt to create another tenant with the same name:", ((string)(null)), table43, "When ");
#line hidden
#line 222
    testRunner.Then("I should receive a validation error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 223
    testRunner.And("the error message should indicate name already exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 224
    testRunner.And("no duplicate tenant should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate required tenant fields")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Validate required tenant fields")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "validation")]
        public void ValidateRequiredTenantFields()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate required tenant fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 227
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 228
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "Status"});
                table44.AddRow(new string[] {
                            "",
                            "Test",
                            "Active"});
#line 229
    testRunner.When("I attempt to create a tenant with missing required fields:", ((string)(null)), table44, "When ");
#line hidden
#line 232
    testRunner.Then("I should receive a validation error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 233
    testRunner.And("the error message should indicate required fields are missing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 234
    testRunner.And("no tenant should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tenant data cleanup on deletion")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Tenant data cleanup on deletion")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "data-retention")]
        public void TenantDataCleanupOnDeletion()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "data-retention"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tenant data cleanup on deletion", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 237
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 238
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 239
    testRunner.And("I have a tenant with users, sessions, and messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 240
    testRunner.When("I delete the tenant with data cleanup option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 241
    testRunner.Then("the tenant should be removed from the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 242
    testRunner.And("all associated user accounts should be deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 243
    testRunner.And("all associated chat sessions should be deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 244
    testRunner.And("all associated messages should be deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 245
    testRunner.And("all API keys should be revoked and deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Export tenant data")]
        [Xunit.TraitAttribute("FeatureTitle", "Tenant Management")]
        [Xunit.TraitAttribute("Description", "Export tenant data")]
        [Xunit.TraitAttribute("Category", "tenant")]
        [Xunit.TraitAttribute("Category", "migration")]
        public void ExportTenantData()
        {
            string[] tagsOfScenario = new string[] {
                    "tenant",
                    "migration"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export tenant data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 248
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 249
    testRunner.Given("I am logged in as a super admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 250
    testRunner.And("I have a tenant with complete data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 251
    testRunner.When("I request to export the tenant data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 252
    testRunner.Then("I should receive a complete data export", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "DataType",
                            "Required"});
                table45.AddRow(new string[] {
                            "Users",
                            "true"});
                table45.AddRow(new string[] {
                            "ChatSessions",
                            "true"});
                table45.AddRow(new string[] {
                            "Messages",
                            "true"});
                table45.AddRow(new string[] {
                            "APIKeys",
                            "true"});
                table45.AddRow(new string[] {
                            "Settings",
                            "true"});
#line 253
    testRunner.And("the export should include:", ((string)(null)), table45, "And ");
#line hidden
#line 260
    testRunner.And("the export should be in a standard format", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 261
    testRunner.And("sensitive data should be properly handled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TenantManagementFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TenantManagementFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
