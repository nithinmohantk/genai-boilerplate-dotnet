// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GenAIBoilerplate.Tests.BDD.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UserAuthenticationFeature : object, Xunit.IClassFixture<UserAuthenticationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Authentication.feature"
#line hidden
        
        public UserAuthenticationFeature(UserAuthenticationFeature.FixtureData fixtureData, GenAIBoilerplate_Tests_BDD_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "User Authentication", "    As a user of the GenAI platform\r\n    I want to authenticate securely\r\n    So " +
                    "that I can access my personalized AI chatbot experience", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
    testRunner.Given("the GenAI platform is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successful user registration")]
        [Xunit.TraitAttribute("FeatureTitle", "User Authentication")]
        [Xunit.TraitAttribute("Description", "Successful user registration")]
        [Xunit.TraitAttribute("Category", "authentication")]
        [Xunit.TraitAttribute("Category", "smoke")]
        public void SuccessfulUserRegistration()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successful user registration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 12
    testRunner.Given("I am a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "FirstName",
                            "LastName"});
                table1.AddRow(new string[] {
                            "user@example.com",
                            "SecurePass123",
                            "John",
                            "Doe"});
#line 13
    testRunner.When("I register with valid credentials:", ((string)(null)), table1, "When ");
#line hidden
#line 16
    testRunner.Then("I should receive a successful registration response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
    testRunner.And("I should receive a JWT access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
    testRunner.And("I should receive a refresh token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
    testRunner.And("my user account should be created in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successful user login")]
        [Xunit.TraitAttribute("FeatureTitle", "User Authentication")]
        [Xunit.TraitAttribute("Description", "Successful user login")]
        [Xunit.TraitAttribute("Category", "authentication")]
        [Xunit.TraitAttribute("Category", "smoke")]
        public void SuccessfulUserLogin()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successful user login", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "FirstName",
                            "LastName"});
                table2.AddRow(new string[] {
                            "user@example.com",
                            "SecurePass123",
                            "John",
                            "Doe"});
#line 23
    testRunner.Given("I have an existing user account:", ((string)(null)), table2, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table3.AddRow(new string[] {
                            "user@example.com",
                            "SecurePass123"});
#line 26
    testRunner.When("I login with valid credentials:", ((string)(null)), table3, "When ");
#line hidden
#line 29
    testRunner.Then("I should receive a successful login response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
    testRunner.And("I should receive a JWT access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.And("I should receive a refresh token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
    testRunner.And("the access token should contain valid user claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Failed login with invalid credentials")]
        [Xunit.TraitAttribute("FeatureTitle", "User Authentication")]
        [Xunit.TraitAttribute("Description", "Failed login with invalid credentials")]
        [Xunit.TraitAttribute("Category", "authentication")]
        [Xunit.TraitAttribute("Category", "security")]
        public void FailedLoginWithInvalidCredentials()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "security"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Failed login with invalid credentials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "FirstName",
                            "LastName"});
                table4.AddRow(new string[] {
                            "user@example.com",
                            "SecurePass123",
                            "John",
                            "Doe"});
#line 36
    testRunner.Given("I have an existing user account:", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table5.AddRow(new string[] {
                            "user@example.com",
                            "WrongPass123"});
#line 39
    testRunner.When("I login with invalid credentials:", ((string)(null)), table5, "When ");
#line hidden
#line 42
    testRunner.Then("I should receive an authentication error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
    testRunner.And("I should not receive any tokens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
    testRunner.And("the error message should indicate invalid credentials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registration with duplicate email")]
        [Xunit.TraitAttribute("FeatureTitle", "User Authentication")]
        [Xunit.TraitAttribute("Description", "Registration with duplicate email")]
        [Xunit.TraitAttribute("Category", "authentication")]
        [Xunit.TraitAttribute("Category", "security")]
        public void RegistrationWithDuplicateEmail()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "security"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Registration with duplicate email", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "FirstName",
                            "LastName"});
                table6.AddRow(new string[] {
                            "user@example.com",
                            "SecurePass123",
                            "John",
                            "Doe"});
#line 48
    testRunner.Given("I have an existing user account:", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "FirstName",
                            "LastName"});
                table7.AddRow(new string[] {
                            "user@example.com",
                            "NewPass123",
                            "Jane",
                            "Smith"});
#line 51
    testRunner.When("I attempt to register with the same email:", ((string)(null)), table7, "When ");
#line hidden
#line 54
    testRunner.Then("I should receive a validation error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
    testRunner.And("the error message should indicate email already exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
    testRunner.And("no new user account should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Registration with invalid data")]
        [Xunit.TraitAttribute("FeatureTitle", "User Authentication")]
        [Xunit.TraitAttribute("Description", "Registration with invalid data")]
        [Xunit.TraitAttribute("Category", "authentication")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.InlineDataAttribute("invalid-email", "SecurePass", "John", "Doe", "Invalid email", new string[0])]
        [Xunit.InlineDataAttribute("user@example.com", "weak", "John", "Doe", "Password too short", new string[0])]
        [Xunit.InlineDataAttribute("user@example.com", "SecurePass", "", "Doe", "First name required", new string[0])]
        [Xunit.InlineDataAttribute("user@example.com", "SecurePass", "John", "", "Last name required", new string[0])]
        public void RegistrationWithInvalidData(string email, string password, string firstName, string lastName, string expectedError, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "authentication",
                    "validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("ExpectedError", expectedError);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Registration with invalid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 60
    testRunner.Given("I am a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password",
                            "FirstName",
                            "LastName"});
                table8.AddRow(new string[] {
                            string.Format("{0}", email),
                            string.Format("{0}", password),
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName)});
#line 61
    testRunner.When("I register with invalid credentials:", ((string)(null)), table8, "When ");
#line hidden
#line 64
    testRunner.Then("I should receive a validation error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
    testRunner.And(string.Format("the error message should contain \"{0}\"", expectedError), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Token refresh with valid refresh token")]
        [Xunit.TraitAttribute("FeatureTitle", "User Authentication")]
        [Xunit.TraitAttribute("Description", "Token refresh with valid refresh token")]
        [Xunit.TraitAttribute("Category", "authentication")]
        [Xunit.TraitAttribute("Category", "tokens")]
        public void TokenRefreshWithValidRefreshToken()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "tokens"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Token refresh with valid refresh token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 76
    testRunner.Given("I have a logged-in user with valid tokens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
    testRunner.When("I request a token refresh using the refresh token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
    testRunner.Then("I should receive a new access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
    testRunner.And("I should receive a new refresh token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
    testRunner.And("the old refresh token should be invalidated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
    testRunner.And("the new access token should contain valid user claims", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Token refresh with invalid refresh token")]
        [Xunit.TraitAttribute("FeatureTitle", "User Authentication")]
        [Xunit.TraitAttribute("Description", "Token refresh with invalid refresh token")]
        [Xunit.TraitAttribute("Category", "authentication")]
        [Xunit.TraitAttribute("Category", "tokens")]
        public void TokenRefreshWithInvalidRefreshToken()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "tokens"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Token refresh with invalid refresh token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 85
    testRunner.Given("I have an invalid or expired refresh token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
    testRunner.When("I request a token refresh using the invalid token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
    testRunner.Then("I should receive an authentication error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
    testRunner.And("I should not receive any new tokens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
    testRunner.And("the error message should indicate invalid refresh token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access protected endpoint with valid token")]
        [Xunit.TraitAttribute("FeatureTitle", "User Authentication")]
        [Xunit.TraitAttribute("Description", "Access protected endpoint with valid token")]
        [Xunit.TraitAttribute("Category", "authentication")]
        [Xunit.TraitAttribute("Category", "security")]
        public void AccessProtectedEndpointWithValidToken()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "security"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access protected endpoint with valid token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 93
    testRunner.Given("I have a logged-in user with valid tokens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 94
    testRunner.When("I access a protected endpoint with the access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
    testRunner.Then("I should receive a successful response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
    testRunner.And("the response should contain user-specific data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access protected endpoint without token")]
        [Xunit.TraitAttribute("FeatureTitle", "User Authentication")]
        [Xunit.TraitAttribute("Description", "Access protected endpoint without token")]
        [Xunit.TraitAttribute("Category", "authentication")]
        [Xunit.TraitAttribute("Category", "security")]
        public void AccessProtectedEndpointWithoutToken()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "security"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access protected endpoint without token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 100
    testRunner.When("I access a protected endpoint without any token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
    testRunner.Then("I should receive an unauthorized error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
    testRunner.And("the response status should be 401", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access protected endpoint with expired token")]
        [Xunit.TraitAttribute("FeatureTitle", "User Authentication")]
        [Xunit.TraitAttribute("Description", "Access protected endpoint with expired token")]
        [Xunit.TraitAttribute("Category", "authentication")]
        [Xunit.TraitAttribute("Category", "security")]
        public void AccessProtectedEndpointWithExpiredToken()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "security"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access protected endpoint with expired token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 105
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 106
    testRunner.Given("I have an expired access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 107
    testRunner.When("I access a protected endpoint with the expired token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
    testRunner.Then("I should receive an unauthorized error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
    testRunner.And("the response status should be 401", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
    testRunner.And("the error message should indicate token has expired", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User logout with token revocation")]
        [Xunit.TraitAttribute("FeatureTitle", "User Authentication")]
        [Xunit.TraitAttribute("Description", "User logout with token revocation")]
        [Xunit.TraitAttribute("Category", "authentication")]
        [Xunit.TraitAttribute("Category", "logout")]
        public void UserLogoutWithTokenRevocation()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "logout"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User logout with token revocation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 114
    testRunner.Given("I have a logged-in user with valid tokens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 115
    testRunner.When("I logout from the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
    testRunner.Then("I should receive a successful logout response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
    testRunner.And("my access token should be revoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
    testRunner.And("my refresh token should be revoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
    testRunner.And("I should not be able to access protected endpoints", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get current user profile")]
        [Xunit.TraitAttribute("FeatureTitle", "User Authentication")]
        [Xunit.TraitAttribute("Description", "Get current user profile")]
        [Xunit.TraitAttribute("Category", "authentication")]
        [Xunit.TraitAttribute("Category", "profile")]
        public void GetCurrentUserProfile()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "profile"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get current user profile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 123
    testRunner.Given("I have a logged-in user with valid tokens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 124
    testRunner.When("I request my user profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 125
    testRunner.Then("I should receive my profile information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "Email",
                            "user@example.com"});
                table9.AddRow(new string[] {
                            "FirstName",
                            "John"});
                table9.AddRow(new string[] {
                            "LastName",
                            "Doe"});
                table9.AddRow(new string[] {
                            "Role",
                            "User"});
#line 126
    testRunner.And("the profile should contain:", ((string)(null)), table9, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update user profile")]
        [Xunit.TraitAttribute("FeatureTitle", "User Authentication")]
        [Xunit.TraitAttribute("Description", "Update user profile")]
        [Xunit.TraitAttribute("Category", "authentication")]
        [Xunit.TraitAttribute("Category", "profile")]
        public void UpdateUserProfile()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "profile"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update user profile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 134
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 135
    testRunner.Given("I have a logged-in user with valid tokens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Phone"});
                table10.AddRow(new string[] {
                            "Johnny",
                            "Doe",
                            "1234567890"});
#line 136
    testRunner.When("I update my profile with new information:", ((string)(null)), table10, "When ");
#line hidden
#line 139
    testRunner.Then("I should receive a successful update response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 140
    testRunner.And("my profile should be updated in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
    testRunner.And("when I request my profile again, it should show the updated information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UserAuthenticationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UserAuthenticationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
