// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GenAIBoilerplate.Tests.BDD.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ChatFunctionalityFeature : object, Xunit.IClassFixture<ChatFunctionalityFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ChatFunctionality.feature"
#line hidden
        
        public ChatFunctionalityFeature(ChatFunctionalityFeature.FixtureData fixtureData, GenAIBoilerplate_Tests_BDD_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Chat Functionality", "    As an authenticated user\r\n    I want to have AI-powered conversations\r\n    So" +
                    " that I can get assistance and information through natural language interaction", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
    testRunner.Given("the GenAI platform is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("the database is clean", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("I have a logged-in user with valid tokens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new chat session")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Create a new chat session")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "smoke")]
        public void CreateANewChatSession()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new chat session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "ModelName",
                            "Description"});
                table11.AddRow(new string[] {
                            "My First Chat",
                            "gpt-4",
                            "A conversation about AI"});
#line 13
    testRunner.When("I create a new chat session:", ((string)(null)), table11, "When ");
#line hidden
#line 16
    testRunner.Then("I should receive a successful session creation response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
    testRunner.And("the session should be created in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "Title",
                            "My First Chat"});
                table12.AddRow(new string[] {
                            "ModelName",
                            "gpt-4"});
                table12.AddRow(new string[] {
                            "Description",
                            "A conversation about AI"});
                table12.AddRow(new string[] {
                            "IsActive",
                            "true"});
#line 18
    testRunner.And("the session should have the correct details:", ((string)(null)), table12, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get user\'s chat sessions")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Get user\'s chat sessions")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "smoke")]
        public void GetUsersChatSessions()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get user\'s chat sessions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "ModelName",
                            "Description"});
                table13.AddRow(new string[] {
                            "AI Discussions",
                            "gpt-4",
                            "General AI conversations"});
                table13.AddRow(new string[] {
                            "Code Help",
                            "gpt-3.5",
                            "Programming assistance"});
                table13.AddRow(new string[] {
                            "Creative Writing",
                            "gpt-4",
                            "Story and content creation"});
#line 27
    testRunner.Given("I have created multiple chat sessions:", ((string)(null)), table13, "Given ");
#line hidden
#line 32
    testRunner.When("I request my chat sessions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
    testRunner.Then("I should receive all my chat sessions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
    testRunner.And("the sessions should be ordered by creation date descending", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
    testRunner.And("each session should contain the correct metadata", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Send a message and receive AI response")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Send a message and receive AI response")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "messaging")]
        [Xunit.TraitAttribute("Category", "smoke")]
        public void SendAMessageAndReceiveAIResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "messaging",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send a message and receive AI response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 39
    testRunner.Given("I have an active chat session with model \"gpt-4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Content",
                            "Role"});
                table14.AddRow(new string[] {
                            "Hello! Can you help me learn about AI?",
                            "User"});
#line 40
    testRunner.When("I send a message:", ((string)(null)), table14, "When ");
#line hidden
#line 43
    testRunner.Then("I should receive a successful message response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
    testRunner.And("the message should be saved to the session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.And("I should receive an AI response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
    testRunner.And("the AI response should be saved to the session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "UserMessage",
                            "AIMessage"});
                table15.AddRow(new string[] {
                            "Role",
                            "User",
                            "Assistant"});
                table15.AddRow(new string[] {
                            "ModelName",
                            "gpt-4",
                            "gpt-4"});
#line 47
    testRunner.And("both messages should have the correct metadata:", ((string)(null)), table15, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Send multiple messages in a conversation")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Send multiple messages in a conversation")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "messaging")]
        public void SendMultipleMessagesInAConversation()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "messaging"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send multiple messages in a conversation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 54
    testRunner.Given("I have an active chat session with model \"gpt-4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
    testRunner.And("I have sent a previous message \"Hello! Tell me about machine learning.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
    testRunner.And("I received an AI response about machine learning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Content",
                            "Role"});
                table16.AddRow(new string[] {
                            "Can you explain neural networks specifically?",
                            "User"});
#line 57
    testRunner.When("I send a follow-up message:", ((string)(null)), table16, "When ");
#line hidden
#line 60
    testRunner.Then("I should receive a successful message response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
    testRunner.And("the AI should respond contextually to the conversation history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
    testRunner.And("the conversation history should be maintained in order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.And("all messages should be associated with the correct session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Switch AI model during conversation")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Switch AI model during conversation")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "models")]
        public void SwitchAIModelDuringConversation()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "models"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Switch AI model during conversation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 67
    testRunner.Given("I have an active chat session with model \"gpt-3.5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 68
    testRunner.And("I have sent some messages in the conversation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "ModelName",
                            "Description"});
                table17.AddRow(new string[] {
                            "gpt-4",
                            "Switched to more advanced model"});
#line 69
    testRunner.When("I update the session to use model \"gpt-4\":", ((string)(null)), table17, "When ");
#line hidden
#line 72
    testRunner.Then("the session should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
    testRunner.And("subsequent messages should use the new model", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
    testRunner.And("the model change should be reflected in message metadata", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Receive streaming AI response")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Receive streaming AI response")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "streaming")]
        public void ReceiveStreamingAIResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "streaming"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receive streaming AI response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 78
    testRunner.Given("I have an active chat session with streaming enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Content",
                            "Role"});
                table18.AddRow(new string[] {
                            "Write a detailed explanation of quantum computing",
                            "User"});
#line 79
    testRunner.When("I send a message requesting a long response:", ((string)(null)), table18, "When ");
#line hidden
#line 82
    testRunner.Then("I should receive a streaming response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
    testRunner.And("the response should be delivered in chunks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
    testRunner.And("each chunk should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.And("the complete response should be assembled correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
    testRunner.And("the final response should be saved to the session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update chat session details")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Update chat session details")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "session-management")]
        public void UpdateChatSessionDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "session-management"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update chat session details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "ModelName",
                            "Description"});
                table19.AddRow(new string[] {
                            "Original Title",
                            "gpt-4",
                            "Original description"});
#line 90
    testRunner.Given("I have an active chat session:", ((string)(null)), table19, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Description"});
                table20.AddRow(new string[] {
                            "Updated Title",
                            "Updated description"});
#line 93
    testRunner.When("I update the session details:", ((string)(null)), table20, "When ");
#line hidden
#line 96
    testRunner.Then("the session should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
    testRunner.And("the updated details should be saved to the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
    testRunner.And("when I retrieve the session, it should show the new details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Archive a chat session")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Archive a chat session")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "session-management")]
        public void ArchiveAChatSession()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "session-management"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Archive a chat session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 102
    testRunner.Given("I have an active chat session with messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
    testRunner.When("I archive the chat session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
    testRunner.Then("the session should be marked as inactive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
    testRunner.And("the session should still be accessible for reading", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
    testRunner.And("I should not be able to send new messages to the archived session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
    testRunner.But("the conversation history should remain intact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Send empty message")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Send empty message")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "validation")]
        public void SendEmptyMessage()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send empty message", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 111
    testRunner.Given("I have an active chat session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 112
    testRunner.When("I attempt to send an empty message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 113
    testRunner.Then("I should receive a validation error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
    testRunner.And("the error message should indicate message content is required", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
    testRunner.And("no message should be saved to the session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Send message to non-existent session")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Send message to non-existent session")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "validation")]
        public void SendMessageToNon_ExistentSession()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send message to non-existent session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 118
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "SessionId",
                            "Content"});
                table21.AddRow(new string[] {
                            "00000000-0000-0000-0000-000000000000",
                            "Test message"});
#line 119
    testRunner.When("I attempt to send a message to a non-existent session:", ((string)(null)), table21, "When ");
#line hidden
#line 122
    testRunner.Then("I should receive a not found error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
    testRunner.And("the error message should indicate session not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
    testRunner.And("no message should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access another user\'s chat session")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Access another user\'s chat session")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "permissions")]
        public void AccessAnotherUsersChatSession()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "permissions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access another user\'s chat session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 127
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 128
    testRunner.Given("another user has a chat session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 129
    testRunner.When("I attempt to access their chat session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 130
    testRunner.Then("I should receive a forbidden error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
    testRunner.And("I should not be able to view their session details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
    testRunner.And("I should not be able to send messages to their session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search chat sessions by title")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Search chat sessions by title")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "search")]
        public void SearchChatSessionsByTitle()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "search"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search chat sessions by title", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "ModelName",
                            "Description"});
                table22.AddRow(new string[] {
                            "AI Research Project",
                            "gpt-4",
                            "Academic research topics"});
                table22.AddRow(new string[] {
                            "Code Review Help",
                            "gpt-3.5",
                            "Programming assistance"});
                table22.AddRow(new string[] {
                            "Creative Writing",
                            "gpt-4",
                            "Story creation"});
#line 136
    testRunner.Given("I have multiple chat sessions:", ((string)(null)), table22, "Given ");
#line hidden
#line 141
    testRunner.When("I search for sessions with title containing \"AI\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 142
    testRunner.Then("I should receive matching sessions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 143
    testRunner.And("the results should contain \"AI Research Project\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
    testRunner.And("the results should not contain unmatched sessions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search messages within sessions")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Search messages within sessions")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "search")]
        public void SearchMessagesWithinSessions()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "search"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search messages within sessions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 147
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Content",
                            "Role"});
                table23.AddRow(new string[] {
                            "Tell me about machine learning",
                            "User"});
                table23.AddRow(new string[] {
                            "Machine learning is a subset of AI",
                            "Assistant"});
                table23.AddRow(new string[] {
                            "What about deep learning?",
                            "User"});
                table23.AddRow(new string[] {
                            "Deep learning uses neural networks",
                            "Assistant"});
#line 148
    testRunner.Given("I have a chat session with multiple messages:", ((string)(null)), table23, "Given ");
#line hidden
#line 154
    testRunner.When("I search for messages containing \"neural networks\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
    testRunner.Then("I should receive matching messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
    testRunner.And("the results should contain the relevant message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
    testRunner.And("the context should show the surrounding conversation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle AI service unavailability")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Handle AI service unavailability")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "error-handling")]
        public void HandleAIServiceUnavailability()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "error-handling"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle AI service unavailability", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 160
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 161
    testRunner.Given("the AI service is temporarily unavailable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 162
    testRunner.And("I have an active chat session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Content",
                            "Role"});
                table24.AddRow(new string[] {
                            "Can you help me with this?",
                            "User"});
#line 163
    testRunner.When("I send a message:", ((string)(null)), table24, "When ");
#line hidden
#line 166
    testRunner.Then("my message should be saved successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 167
    testRunner.But("I should receive a service unavailable error for the AI response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
#line 168
    testRunner.And("the error should indicate the AI service is temporarily down", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
    testRunner.And("I should be able to retry the request later", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle rate limiting")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Handle rate limiting")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "rate-limiting")]
        public void HandleRateLimiting()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "rate-limiting"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle rate limiting", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 172
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 173
    testRunner.Given("I have sent many messages in quick succession", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 174
    testRunner.And("I have reached the rate limit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Content",
                            "Role"});
                table25.AddRow(new string[] {
                            "One more message",
                            "User"});
#line 175
    testRunner.When("I attempt to send another message:", ((string)(null)), table25, "When ");
#line hidden
#line 178
    testRunner.Then("I should receive a rate limit error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 179
    testRunner.And("the error should indicate I need to wait", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
    testRunner.And("the error should include when I can try again", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Export chat session conversation")]
        [Xunit.TraitAttribute("FeatureTitle", "Chat Functionality")]
        [Xunit.TraitAttribute("Description", "Export chat session conversation")]
        [Xunit.TraitAttribute("Category", "chat")]
        [Xunit.TraitAttribute("Category", "export")]
        public void ExportChatSessionConversation()
        {
            string[] tagsOfScenario = new string[] {
                    "chat",
                    "export"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export chat session conversation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 183
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 184
    testRunner.Given("I have a chat session with multiple messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 185
    testRunner.When("I request to export the conversation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 186
    testRunner.Then("I should receive the complete conversation history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 187
    testRunner.And("the export should include all messages in chronological order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Required"});
                table26.AddRow(new string[] {
                            "Timestamp",
                            "true"});
                table26.AddRow(new string[] {
                            "Role",
                            "true"});
                table26.AddRow(new string[] {
                            "Content",
                            "true"});
                table26.AddRow(new string[] {
                            "ModelName",
                            "true"});
#line 188
    testRunner.And("the export should include metadata for each message:", ((string)(null)), table26, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ChatFunctionalityFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ChatFunctionalityFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
